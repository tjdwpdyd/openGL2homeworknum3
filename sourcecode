#include <GL/glut.h>

float ballY = 1.5f;           
float velocityY = 0.01f;     
const float gravity = -0.0005f; 
const float elasticity = 0.8f;  
bool isWireframe = false;    

void drawGround() {
    glPushMatrix();
    glTranslatef(0.0f, -0.5f, 0.0f);
    glScalef(3.0f, 0.1f, 1.0f);      
    glutSolidCube(1.0f);
    glPopMatrix();
}


void drawBall() {
    float stretchFactorX = 1.0f;
    float stretchFactorY = 1.0f;


    if (ballY <= -0.3f) {
        stretchFactorX = 1.2f;
        stretchFactorY = 0.8f;
    }
    else if (velocityY > 0) {
        stretchFactorX = 0.8f;
        stretchFactorY = 1.2f;
    }

    glPushMatrix();
    glTranslatef(0.0f, ballY, 0.0f);   
    glScalef(stretchFactorX, stretchFactorY, 1.0f); 
    glutSolidSphere(0.2f, 20, 20);     
    glPopMatrix();
}


void update(int value) {

    if (ballY <= -0.3f && velocityY < 0) {
        velocityY = -velocityY * elasticity; 
        ballY = -0.3f; 
    }
    else {
        velocityY += gravity;
        ballY += velocityY;
    }

    glutPostRedisplay();           
    glutTimerFunc(16, update, 0);   
}

void display() {
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT); 
    glLoadIdentity();
    drawGround(); 
    drawBall();   
    glutSwapBuffers();
}

void handleKeypress(unsigned char key, int x, int y) {
    if (key == 'w' || key == 'W') {
        isWireframe = !isWireframe;
        if (isWireframe) {
            glPolygonMode(GL_FRONT_AND_BACK, GL_LINE); 
        }
        else {
            glPolygonMode(GL_FRONT_AND_BACK, GL_FILL); 
        }
    }
}


void init() {
    glEnable(GL_DEPTH_TEST);  
    glClearColor(0.2f, 0.3f, 0.3f, 1.0f);
}


int main(int argc, char** argv) {
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB | GLUT_DEPTH);
    glutInitWindowSize(800, 600); 
    glutCreateWindow("Bouncing Elastic Ball"); 

    init(); 

    glutDisplayFunc(display); 
    glutKeyboardFunc(handleKeypress); 
    glutTimerFunc(16, update, 0); 

    glutMainLoop(); 
    return 0;
}
